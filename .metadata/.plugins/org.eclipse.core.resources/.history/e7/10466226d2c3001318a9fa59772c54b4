/**
* @package_name   com.stuManSys.utility
* @file_name InputHandler.java
* @author Administrator
* @date 2014-4-13
*/

package jxau.sms.thomas.util;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.Field;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.annotation.Resource;
import jxau.sms.globaldao.Dao;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

/** 
 * @ClassName: InputHandler
 * @Description: 用于导入文件处理，调用inputExcel方法实现导入
 */
/**
 * @author Administrator
 *
 */
public class InputHandler{

	private String filePath;
	private HSSFSheet sheet;
	//private List<T> inputAttrs;
	private Dao dao;
	private final String mapperId = "inputid";
	
	public InputHandler(String filePath){
		this.filePath = filePath;
	}
	
	@Resource(name="dao")
	public void setDao(Dao dao){
		this.dao = dao;
	}

	private int getTotalCount(){
		FileInputStream fin;
		int totalRow = 0;
		try {
			fin = new FileInputStream(filePath);
			HSSFWorkbook workbook=new HSSFWorkbook(fin);//创建工作薄
			sheet=workbook.getSheetAt(0);//得到工作表
			totalRow =sheet.getLastRowNum();//得到excel的总记录条数
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return totalRow;
	}
	public <T> void transferFormation(Field field, HSSFCell cell,T attribute) throws IllegalArgumentException, IllegalAccessException{
		String fieldType = field.getType().getName();
		if (.equals(java.lang.String.class.getName())) {
				field.set(attribute, cell.getRichStringCellValue().toString());
		}else if (field.getType().getName().equals(java.lang.Integer.class.getName())||) {
			field.set(attribute, Integer.parseInt(cell.getRichStringCellValue().toString()));
		}else if (field.getType().getName().equals(java.lang.Double.class.getName())) {
			field.set(attribute,Double.parseDouble(cell.getRichStringCellValue().toString()));	
		}else if (field.getType().getName().equals(java.util.Date.class.getName())) {
			DateFormat dateFormat = new SimpleDateFormat();
			field.set(attribute,dateFormat.format(cell.getRichStringCellValue().toString()));
		}else {
			field.set(attribute,Float.parseFloat(cell.getRichStringCellValue().toString()));	
		}
	}
	
	public <T> List<T> setAttributes(List<T> attributes){
		
		Field[] fields = attributes.get(0).getClass().getDeclaredFields();
		
		for(int i=1;i<=getTotalCount();i++){
			 HSSFRow row=sheet.getRow(i);
			 for (int j = 0; j < fields.length; j++) {
				 HSSFCell cell=row.getCell(j);
				fields[j].setAccessible(true);
				try {
					 transferFormation(fields[j], cell, attributes.get(i - 1));
						//fields[j].set(attributes.get(i-1),cell.getRichStringCellValue().toString());
						//转化属性的格式
					} catch (IllegalArgumentException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IllegalAccessException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
		 }
		 return attributes;
	}
	
	public <T> int inputExcel(List<T> attributes,String viewId){	//viewId属于AbstractMapper
		//inputAttrs = setAttributes(attributes);
		dao.batchAdd(MapperUtility.getMapperId(viewId,mapperId), setAttributes(attributes));
		return attributes.size();
	}

}
